{"version":3,"sources":["components/HangmanControl.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/guessed-letter-reducer.js","reducers/lives-reducer.js","reducers/words-to-guess-reducer.js","reducers/win-reducer.js","reducers/toggle-game-reducer.js","index.js"],"names":["HangmanControl","getIndexes","arr","letter","indexes","forEach","e","i","push","startGame","dispatch","props","type","word","randomWords","guess","event","target","setAttribute","wordToGuess","length","elementIndex","index","checkWin","win","guessed","setTimeout","restart","displayWord","console","log","className","this","game","map","key","onClick","lives","disabled","character","HeartFilled","style","color","value","guessedLetters","Component","connect","state","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","temp","includes","letters","store","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c1434eb.chunk.js","sourcesContent":["// state entered letters =>array\n// state of lives => number\n// word being guessed => string/array\n// actaul hang man => tbd 5 imgs\n\nimport React, { Component} from 'react'\nimport {connect} from \"react-redux\"\nimport { Rate } from 'antd';\nimport { HeartFilled } from '@ant-design/icons';\nimport randomWords from 'random-words'\n\nclass HangmanControl extends Component {\n// function to return array of indexes of the word to guess state that match guessed letter\n\n\ngetIndexes=(arr,letter)=>{\n  let indexes =[]\n  arr.forEach((e,i)=>{\n    if(e.letter === letter){\n      indexes.push(i);\n    }\n  })\n  return indexes;\n}\n// will eventually set the word from Api or word list\n startGame=()=>{\n   const {dispatch} = this.props;\n   const action ={type: \"SET_WORD\", word: randomWords()}\n   dispatch(action)\n   dispatch({type: \"TOGGLE\"})\n }\n\n //main function where the gussedletter is compared and the game updated\n guess=(letter, event)=>{\n   event.target.setAttribute(\"disabled\",true)\n  const word = this.props.wordToGuess; \n  const {dispatch} = this.props;\n  const action = {type:\"ADD_LETTER\", letter:letter}\n  dispatch(action)\n  //see above declaration\n  let indexes = this.getIndexes(word, letter)\n \n  if (indexes.length>0){\n    indexes.forEach((elementIndex)=>{\n      let trueAction = {type: 'RIGHT', index:elementIndex}\n      dispatch(trueAction)\n    })\n    this.checkWin()\n  } else{\n    let livesAction = {type: \"LOSE_LIFE\"}\n    dispatch(livesAction)\n  }\n}\ncheckWin=()=>{\n  let win = true\n  this.props.wordToGuess.forEach(letter=>{\n    if(!letter.guessed){\n      win=false\n    }\n  })\n  if(win){\n    const {dispatch} = this.props;\n    let winAction = {type: \"SET_WIN\"}\n    dispatch(winAction)\n    setTimeout(() => {\n      dispatch({type:\"RESET\"})\n    },3000);\n  }\n}\nrestart=()=>{\n  const {dispatch} = this.props;\n  let resetAction = {type: \"RESET\"}\n  dispatch(resetAction)\n}\n\ndisplayWord=()=>{\n let word = ''\n console.log(\"something\")\n  this.props.wordToGuess.forEach(e => {\n    word+=e.letter\n  });\n  setTimeout(() => {\n    this.props.dispatch({type:\"RESET\"})\n  },5000);\n  return word\n}\n\n\n  render() {\n    \n    let alph = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\",\n    \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  \n    return (\n      <div className=\"main\">\n        {!this.props.game? <button onClick={this.startGame}>Start</button>:\n        <div className=\"game-screen\">\n          <h2>{this.props.win? \"Congrats you win\": ''}</h2>\n          <h1>{this.props.wordToGuess.map((letter,i)=><span key={i} >{letter.guessed? letter.letter: \"_\"} </span>)}</h1>\n              {alph.map(letter=><button  key={letter} onClick={(event)=>this.guess(letter,event)}>{letter}</button>)}\n              <br/>\n\n          <div className=\"lives\">\n            {this.props.lives>0?<Rate disabled character={<HeartFilled/>} style={{color:\"red\"}} value={this.props.lives}/>:<p> You lost :( the word was <strong>{this.displayWord()}</strong></p>}\n          </div>\n\n          <div className=\"guesses\"> \n            <h2>Guesses:</h2>\n            {this.props.guessedLetters.map((guess, i)=><span key={i}> {guess} </span>)}\n          </div>\n\n          <button onClick={this.restart}>reset</button>\n       </div>\n        }  \n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  const { guessedLetters, lives, wordToGuess, win, game} = state\n  return { guessedLetters, lives, wordToGuess, win, game }\n}\n\nHangmanControl = connect(mapStateToProps)(HangmanControl)\nexport default HangmanControl","import React from 'react';\nimport HangmanControl from './HangmanControl'\nimport 'antd/dist/antd.css'; //======> need this for antd\nimport '../App.css';\n\nfunction App() {\n  return (\n   <HangmanControl/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport guessedLetterReducer from \"./guessed-letter-reducer\";\nimport livesReducer from './lives-reducer'\nimport wordToGuessReducer from './words-to-guess-reducer'\nimport winReducer from './win-reducer'\nimport gameReducer from './toggle-game-reducer'\n\n\nconst rootReducer = combineReducers({\n  guessedLetters: guessedLetterReducer,\n  lives: livesReducer,\n  wordToGuess: wordToGuessReducer,\n  win: winReducer,\n  game: gameReducer\n});\n\nexport default rootReducer","export default (state=[], action)=>{\n  const {letter} = action;\n  switch (action.type) {\n    case \"ADD_LETTER\":\n      let temp=[...state]\n      if(!temp.includes(letter)){\n        temp.push(letter)\n      }\n      return temp;\n\n    case \"RESET\":\n      return [];\n   \n    default:\n      return state;\n  }\n}\n","export default (state=5, action)=>{\n switch(action.type){\n   case \"LOSE_LIFE\":\n     let temp = state;\n     if(temp>0){\n       temp -= 1\n     }\n     return temp;\n\n   case \"RESET\":\n     return 5;  \n\n    default:\n      return state\n }\n}","export default (state=[], action)=>{\n  const {word, index} = action;\n  switch (action.type) {\n    case \"SET_WORD\":\n      let temp=[]\n     let letters= [...word]\n      letters.forEach(letter => {\n        temp.push({letter, guessed:false})\n        \n      });\n\n      return temp;\n\n    case \"RIGHT\":\n      let guessed = [...state];\n      guessed[index].guessed = true;\n      return guessed;\n\n    case \"RESET\":\n      return [];\n   \n    default:\n      return state;\n  }\n}","export default (state=false, action)=>{\n  switch (action.type) {\n    case \"SET_WIN\":\n       return true;\n    case \"RESET\":\n      return false;\n    default:\n      return state;\n  }\n}","export default (state=false, action)=>{\n  switch (action.type) {\n    case \"TOGGLE\":\n       return !state;\n    case \"RESET\":\n      return false;\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport reducer from './reducers/index'\nimport {Provider} from 'react-redux'\n\n\n\nconst store = createStore(reducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}